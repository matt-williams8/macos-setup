- name: Configure global git configuration
  ansible.builtin.template:
    src: ./files/gitconfig
    dest: "{{ user_home }}/.gitconfig"

- name: Configure global gitignore
  ansible.builtin.copy:
    src: ./files/gitignore
    dest: "{{ user_home }}/.gitignore"

- name: Install GitHub CLI
  ansible.builtin.homebrew:
    name: gh
    state: present

# Ansible does not currently support real-time stdout output of tasks, so we cannot programatically call
# gh auth login and see the verification code in the ansible output in order to stick it in the browser.
# Therefore we have a bit of a hack where we give the gh auth login command to run and wait until
# the auth process has been followed.
- name: Check if authd with GitHub
  ansible.builtin.command: gh auth status
  register: gh_auth_status
  # gh auth status outputs to stderr, so only actually fail if the command didn't give us a 0 exit code 
  failed_when: gh_auth_status.rc != 0

- name: Ask to auth with GitHub CLI
  ansible.builtin.debug:
    msg: Please authenticate with GitHub via 'gh auth login', you have 2 minutes
  # gh auth status outputs to stderr rather than std out, so look there instead
  when: gh_auth_status.stderr.find("Logged in to github.com as " ~ github_username) == -1

- name: Wait for successful auth with GitHub CLI
  ansible.builtin.command: gh auth status
  register: gh_auth_retry_status
  # gh auth status outputs to stderr rather than std out, so look there instead
  until: gh_auth_retry_status.stderr.find("Logged in to github.com as " ~ github_username) != -1
  retries: 8
  delay: 15 
  when: gh_auth_status.stderr.find("Logged in to github.com as " ~ github_username) == -1